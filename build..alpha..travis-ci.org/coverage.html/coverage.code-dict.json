{"/home/travis/build/npmtest/node-npmtest-express.io/test.js":"/* istanbul instrument in package npmtest_express_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express.io/lib.npmtest_express.io.js":"/* istanbul instrument in package npmtest_express_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express.io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express.io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_io.__dirname + '/lib.npmtest_express_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express.io/node_modules/express.io/switch.js":"\ntry {\n    module.exports = require('./compiled');\n} catch(error) {\n    require('./node_modules/coffee-script');\n    module.exports = require('./lib');\n}\n\n","/home/travis/build/npmtest/node-npmtest-express.io/node_modules/express.io/compiled/index.js":"// Generated by CoffeeScript 1.4.0\n(function() {\n  var RequestIO, RoomIO, async, connect, express, http, https, initRoutes, io, key, listen, middleware, session, sessionConfig, value, _;\n\n  connect = require('express/node_modules/connect');\n\n  express = require('express');\n\n  io = require('socket.io');\n\n  http = require('http');\n\n  https = require('https');\n\n  async = require('async');\n\n  middleware = require('./middleware');\n\n  _ = require('underscore');\n\n  RequestIO = require('./request').RequestIO;\n\n  RoomIO = require('./room').RoomIO;\n\n  express.io = io;\n\n  express.io.routeForward = middleware.routeForward;\n\n  session = express.session;\n\n  delete express.session;\n\n  sessionConfig = new Object;\n\n  express.session = function(options) {\n    var _ref, _ref1, _ref2;\n    if (options == null) {\n      options = new Object;\n    }\n    if ((_ref = options.key) == null) {\n      options.key = 'connect.sid';\n    }\n    if ((_ref1 = options.store) == null) {\n      options.store = new session.MemoryStore;\n    }\n    if ((_ref2 = options.cookie) == null) {\n      options.cookie = new Object;\n    }\n    sessionConfig = options;\n    return session(options);\n  };\n\n  for (key in session) {\n    value = session[key];\n    express.session[key] = value;\n  }\n\n  express.application.http = function() {\n    this.server = http.createServer(this);\n    return this;\n  };\n\n  express.application.https = function(options) {\n    this.server = https.createServer(options, this);\n    return this;\n  };\n\n  express.application.io = function(options) {\n    var defaultOptions,\n      _this = this;\n    if (options == null) {\n      options = new Object;\n    }\n    defaultOptions = {\n      log: false\n    };\n    _.extend(options, defaultOptions);\n    this.io = io.listen(this.server, options);\n    this.io.router = new Object;\n    this.io.middleware = [];\n    this.io.route = function(route, next, options) {\n      var split, _results;\n      if ((options != null ? options.trigger : void 0) === true) {\n        if (route.indexOf(':' === -1)) {\n          this.router[route](next);\n        } else {\n          split = route.split(':');\n          this.router[split[0]][split[1]](next);\n        }\n      }\n      if (_.isFunction(next)) {\n        return this.router[route] = next;\n      } else {\n        _results = [];\n        for (key in next) {\n          value = next[key];\n          _results.push(this.router[\"\" + route + \":\" + key] = value);\n        }\n        return _results;\n      }\n    };\n    this.io.configure(function() {\n      return _this.io.set('authorization', function(data, next) {\n        var cookieParser;\n        if (sessionConfig.store == null) {\n          return async.forEachSeries(_this.io.middleware, function(callback, next) {\n            return callback(data, next);\n          }, function(error) {\n            if (error != null) {\n              return next(error);\n            }\n            return next(null, true);\n          });\n        }\n        cookieParser = express.cookieParser();\n        return cookieParser(data, null, function(error) {\n          var rawCookie, request, sessionId;\n          if (error != null) {\n            return next(error);\n          }\n          rawCookie = data.cookies[sessionConfig.key];\n          if (rawCookie == null) {\n            request = {\n              headers: {\n                cookie: data.query.cookie\n              }\n            };\n            return cookieParser(request, null, function(error) {\n              var sessionId;\n              data.cookies = request.cookies;\n              rawCookie = data.cookies[sessionConfig.key];\n              if (rawCookie == null) {\n                return next(\"No cookie present\", false);\n              }\n              sessionId = connect.utils.parseSignedCookie(rawCookie, sessionConfig.secret);\n              data.sessionID = sessionId;\n              return sessionConfig.store.get(sessionId, function(error, session) {\n                if (error != null) {\n                  return next(error);\n                }\n                data.session = new connect.session.Session(data, session);\n                return next(null, true);\n              });\n            });\n          }\n          sessionId = connect.utils.parseSignedCookie(rawCookie, sessionConfig.secret);\n          data.sessionID = sessionId;\n          return sessionConfig.store.get(sessionId, function(error, session) {\n            if (error != null) {\n              return next(error);\n            }\n            data.session = new connect.session.Session(data, session);\n            return next(null, true);\n          });\n        });\n      });\n    });\n    this.io.use = function(callback) {\n      return _this.io.middleware.push(callback);\n    };\n    this.io.sockets.on('connection', function(socket) {\n      return initRoutes(socket, _this.io);\n    });\n    this.io.broadcast = function() {\n      var args;\n      args = Array.prototype.slice.call(arguments, 0);\n      return _this.io.sockets.emit.apply(_this.io.sockets, args);\n    };\n    this.io.room = function(room) {\n      return new RoomIO(room, _this.io.sockets);\n    };\n    this.stack.push({\n      route: '',\n      handle: function(request, response, next) {\n        request.io = {\n          route: function(route) {\n            var ioRequest;\n            ioRequest = new Object;\n            for (key in request) {\n              value = request[key];\n              ioRequest[key] = value;\n            }\n            ioRequest.io = {\n              broadcast: _this.io.broadcast,\n              respond: function() {\n                var args;\n                args = Array.prototype.slice.call(arguments, 0);\n                return response.json.apply(response, args);\n              },\n              route: function(route) {\n                return _this.io.route(route, ioRequest, {\n                  trigger: true\n                });\n              },\n              data: request.body\n            };\n            return _this.io.route(route, ioRequest, {\n              trigger: true\n            });\n          },\n          broadcast: _this.io.broadcast\n        };\n        return next();\n      }\n    });\n    return this;\n  };\n\n  listen = express.application.listen;\n\n  express.application.listen = function() {\n    var args;\n    args = Array.prototype.slice.call(arguments, 0);\n    if (this.server != null) {\n      return this.server.listen.apply(this.server, args);\n    } else {\n      return listen.apply(this, args);\n    }\n  };\n\n  initRoutes = function(socket, io) {\n    var setRoute, _ref, _results;\n    setRoute = function(key, callback) {\n      return socket.on(key, function(data, respond) {\n        var request, _base, _ref;\n        if (typeof data === 'function') {\n          respond = data;\n          data = void 0;\n        }\n        request = {\n          data: data,\n          session: socket.handshake.session,\n          sessionID: socket.handshake.sessionID,\n          sessionStore: sessionConfig.store,\n          socket: socket,\n          headers: socket.handshake.headers,\n          cookies: socket.handshake.cookies,\n          handshake: socket.handshake\n        };\n        session = socket.handshake.session;\n        if (session != null) {\n          request.session = new connect.session.Session(request, session);\n        }\n        socket.handshake.session = request.session;\n        request.io = new RequestIO(socket, request, io);\n        request.io.respond = respond;\n        if ((_ref = (_base = request.io).respond) == null) {\n          _base.respond = function() {};\n        }\n        return callback(request);\n      });\n    };\n    _ref = io.router;\n    _results = [];\n    for (key in _ref) {\n      value = _ref[key];\n      _results.push(setRoute(key, value));\n    }\n    return _results;\n  };\n\n  module.exports = express;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-express.io/node_modules/express.io/compiled/middleware.js":"// Generated by CoffeeScript 1.4.0\n(function() {\n  var configs, regex, _;\n\n  _ = require('underscore');\n\n  regex = {\n    single: /\\/([^\\/]+)\\/?/,\n    doubleOptional: /\\/([^\\/]+)(?:\\/([^\\/]+)\\/?)?/,\n    double: /\\/([^\\/]+)\\/([^\\/]+)\\/?/\n  };\n\n  configs = {\n    backbone: {\n      create: {\n        method: 'post',\n        regex: regex.single\n      },\n      read: {\n        method: 'get',\n        regex: regex.doubleOptional,\n        variables: ['id']\n      },\n      update: {\n        method: 'put',\n        regex: regex.double,\n        variables: ['id']\n      },\n      \"delete\": {\n        method: 'delete',\n        regex: regex.double,\n        variables: ['id']\n      }\n    },\n    angular: {\n      list: {\n        method: 'get',\n        regex: regex.single\n      },\n      create: {\n        method: 'post',\n        regex: regex.single\n      },\n      read: {\n        method: 'get',\n        regex: regex.double,\n        variables: ['id']\n      },\n      update: {\n        method: 'put',\n        regex: regex.double,\n        variables: ['id']\n      },\n      \"delete\": {\n        method: 'delete',\n        regex: regex.double,\n        variables: ['id']\n      }\n    }\n  };\n\n  configs.backbonjs = configs.backbone;\n\n  configs.angularjs = configs.angular;\n\n  exports.routeForward = function(options) {\n    if (!_.isObject(options.config)) {\n      options.type = options.config;\n      options.config = configs[options.type];\n      if (options.config == null) {\n        throw new Error(\"RouteForwardError: No config for \" + options.type);\n      }\n    }\n    return function(request, response, next) {\n      var index, match, meta, route, variable, _ref, _ref1, _ref2, _ref3;\n      _ref = options.config;\n      for (route in _ref) {\n        meta = _ref[route];\n        if (meta.method === request.method.toLowerCase()) {\n          match = meta.regex.exec(request.url);\n          if (match != null) {\n            if ((_ref1 = meta.variables) == null) {\n              meta.variables = [];\n            }\n            if ((_ref2 = request.params) == null) {\n              request.params = {};\n            }\n            _ref3 = meta.variables;\n            for (index in _ref3) {\n              variable = _ref3[index];\n              request.params[variable] = match[2 + parseInt(index)];\n            }\n            return request.io.route(\"\" + match[1] + \":\" + route);\n          }\n        }\n      }\n      return next();\n    };\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-express.io/node_modules/express.io/compiled/request.js":"// Generated by CoffeeScript 1.4.0\n(function() {\n  var RoomIO;\n\n  RoomIO = require('./room').RoomIO;\n\n  exports.RequestIO = (function() {\n\n    function RequestIO(socket, request, io) {\n      this.socket = socket;\n      this.request = request;\n      this.manager = io;\n    }\n\n    RequestIO.prototype.broadcast = function(event, message) {\n      return this.socket.broadcast.emit(event, message);\n    };\n\n    RequestIO.prototype.emit = function(event, message) {\n      return this.socket.emit(event, message);\n    };\n\n    RequestIO.prototype.room = function(room) {\n      return new RoomIO(room, this.socket);\n    };\n\n    RequestIO.prototype.join = function(room) {\n      return this.socket.join(room);\n    };\n\n    RequestIO.prototype.route = function(route) {\n      return this.manager.route(route, this.request, {\n        trigger: true\n      });\n    };\n\n    RequestIO.prototype.leave = function(room) {\n      return this.socket.leave(room);\n    };\n\n    RequestIO.prototype.on = function() {\n      var args;\n      args = Array.prototype.slice.call(arguments, 0);\n      return this.sockets.on.apply(this.socket, args);\n    };\n\n    RequestIO.prototype.disconnect = function(callback) {\n      return this.socket.disconnect(callback);\n    };\n\n    return RequestIO;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-express.io/node_modules/express.io/compiled/room.js":"// Generated by CoffeeScript 1.4.0\n(function() {\n\n  exports.RoomIO = (function() {\n\n    function RoomIO(name, socket) {\n      this.name = name;\n      this.socket = socket;\n    }\n\n    RoomIO.prototype.broadcast = function(event, message) {\n      if (this.socket.broadcast != null) {\n        return this.socket.broadcast.to(this.name).emit(event, message);\n      } else {\n        return this.socket[\"in\"](this.name).emit(event, message);\n      }\n    };\n\n    return RoomIO;\n\n  })();\n\n}).call(this);\n"}